{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flexible audio/video conversions and thumbnailing for hi*php*ies. Wraps around ffmpeg and ffprobe and exposes most of their features, like scaling, clipping, filters, transcoding, audio extraction and much more. To prevent limitations, the API rather focus on providing developer fine-tuned parameters than giving ready-made recipes. Transcoding and conversions generally requires specific processing, judge by yourself . To help starting, the documentation includes a lot of examples and snippets you can easily try and tune later. Check also alternatives wrappers for ffmpeg, they are good and sometimes offer more magic if you're looking for it. It likes PSR (psr-log, psr-container, psr-simplecache), tastes php 7.1 in strict mode, tries to fail as early as possible with clear exception messages and ensure that substitution is possible when you need to customize (SOLID friendly) . Under the hood, it relies on the battle-tested symfony/process , its only dependency. Requirements \u00b6 A PHP version >= 7.1 and depending on required services: ffmpeg and/or ffprobe. Features at a glance \u00b6 Video services \u00b6 VideoConverter ( doc here ) Conversions: transcode, compress, transmux... Clipping (start-time/send-time) Filters: scale, deinterlace, denoise... and others . <?php // A quick taste $converter = new VideoConverter ( new FFMpegConfig ( '/path/to/ffmpeg' )); $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) -> withStreamable ( true ) -> withVideoFilter ( new ScaleFilter ( 720 , 576 ) ) -> withCrf ( 24 ); $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.mp4' , $params ); VideoInfoReader ( doc here ) Duration, dimensions, number of frames <?php // a quick taste $infoReader = new VideoInfoReader ( new FFProbeConfig ( '/path/to/ffprobe' )); try { $videoInfo = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Break here } // Total duration $duration = $videoInfo -> getDuration (); // ffprobe format: i.e 'mov,mp4,m4a,3gp,3g2,mj2' $format = $videoInfo -> getFormatName (); // Iterable video streams $videoStreams = $videoInfo -> getVideoStreams (); echo $videoStreams -> getFirst () -> getCodecName (); $audioStreams = $videoInfo -> getAudioStreams (); // ... VideoThumbGenerator ( doc here ) Thumbnail at specific time or frame. Filters: scale, deinterlace, denoise... and others . <?php // a quick taste $generator = new VideoThumbGenerator ( new FFMpegConfig ( '/path/to/ffmpeg' )); $params = ( new VideoThumbParams ()) -> withVideoFilter ( new ScaleFilter ( 720 , 576 ) ) -> withTime ( 1.25 ); $generator -> makeThumbnail ( '/path/inputFile.mov' , '/path/outputFile.jpg' , $params ); VideoAnalyzer ( doc here ) Interlacing detection <?php // a quick taste $analyzer = new VideoAnalyzer ( new FFMpegConfig ( '/path/to/ffmpeg' )); $interlaceGuess = $analyzer -> detectInterlacement (); $interlaced = $interlaceGuess -> isInterlaced (); Alternatives \u00b6 https://github.com/PHP-FFMpeg/PHP-FFMpeg https://github.com/char0n/ffmpeg-php","title":"Home"},{"location":"#requirements","text":"A PHP version >= 7.1 and depending on required services: ffmpeg and/or ffprobe.","title":"Requirements"},{"location":"#features-at-a-glance","text":"","title":"Features at a glance"},{"location":"#video-services","text":"VideoConverter ( doc here ) Conversions: transcode, compress, transmux... Clipping (start-time/send-time) Filters: scale, deinterlace, denoise... and others . <?php // A quick taste $converter = new VideoConverter ( new FFMpegConfig ( '/path/to/ffmpeg' )); $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) -> withStreamable ( true ) -> withVideoFilter ( new ScaleFilter ( 720 , 576 ) ) -> withCrf ( 24 ); $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.mp4' , $params ); VideoInfoReader ( doc here ) Duration, dimensions, number of frames <?php // a quick taste $infoReader = new VideoInfoReader ( new FFProbeConfig ( '/path/to/ffprobe' )); try { $videoInfo = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Break here } // Total duration $duration = $videoInfo -> getDuration (); // ffprobe format: i.e 'mov,mp4,m4a,3gp,3g2,mj2' $format = $videoInfo -> getFormatName (); // Iterable video streams $videoStreams = $videoInfo -> getVideoStreams (); echo $videoStreams -> getFirst () -> getCodecName (); $audioStreams = $videoInfo -> getAudioStreams (); // ... VideoThumbGenerator ( doc here ) Thumbnail at specific time or frame. Filters: scale, deinterlace, denoise... and others . <?php // a quick taste $generator = new VideoThumbGenerator ( new FFMpegConfig ( '/path/to/ffmpeg' )); $params = ( new VideoThumbParams ()) -> withVideoFilter ( new ScaleFilter ( 720 , 576 ) ) -> withTime ( 1.25 ); $generator -> makeThumbnail ( '/path/inputFile.mov' , '/path/outputFile.jpg' , $params ); VideoAnalyzer ( doc here ) Interlacing detection <?php // a quick taste $analyzer = new VideoAnalyzer ( new FFMpegConfig ( '/path/to/ffmpeg' )); $interlaceGuess = $analyzer -> detectInterlacement (); $interlaced = $interlaceGuess -> isInterlaced ();","title":"Video services"},{"location":"#alternatives","text":"https://github.com/PHP-FFMpeg/PHP-FFMpeg https://github.com/char0n/ffmpeg-php","title":"Alternatives"},{"location":"install-ffmpeg/","text":"FFMpeg installation \u00b6 Linux \u00b6 Most distributions offers ffmpeg in their repositories. If you're not happy with their version, use a static build instead. Distribution based \u00b6 Ubuntu flavors: $ sudo apt install ffmpeg Static builds \u00b6 For linux, you can easily download ffmpeg/ffprobe statically compiled binaries at https://johnvansickle.com/ffmpeg/ Travis/CI notes \u00b6 As an example look to the travis install script .","title":"Install ffmpeg"},{"location":"install-ffmpeg/#ffmpeg-installation","text":"","title":"FFMpeg installation"},{"location":"install-ffmpeg/#linux","text":"Most distributions offers ffmpeg in their repositories. If you're not happy with their version, use a static build instead.","title":"Linux"},{"location":"install-ffmpeg/#distribution-based","text":"Ubuntu flavors: $ sudo apt install ffmpeg","title":"Distribution based"},{"location":"install-ffmpeg/#static-builds","text":"For linux, you can easily download ffmpeg/ffprobe statically compiled binaries at https://johnvansickle.com/ffmpeg/","title":"Static builds"},{"location":"install-ffmpeg/#travisci-notes","text":"As an example look to the travis install script .","title":"Travis/CI notes"},{"location":"install/","text":"Installation \u00b6 Composer \u00b6 Be sure to have php7.1 installed and add soluble/mediatools to your project dependencies. $ composer require soluble/mediatools FFMpeg \u00b6 Installation \u00b6 Ubuntu/Linux $ sudo apt install ffmpeg Or choose a static build by downloading latest https://johnvansickle.com/ffmpeg/ Travis/CI As an example look to the travis install script . Notes \u00b6 This library relies on FFMpeg binaries ffmpeg is required by VideoConverter , VideoVideoAnalyzer and VideoThumbGenerator . ffprobe is required by VideoInfoReader .","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#composer","text":"Be sure to have php7.1 installed and add soluble/mediatools to your project dependencies. $ composer require soluble/mediatools","title":"Composer"},{"location":"install/#ffmpeg","text":"","title":"FFMpeg"},{"location":"install/#installation_1","text":"Ubuntu/Linux $ sudo apt install ffmpeg Or choose a static build by downloading latest https://johnvansickle.com/ffmpeg/ Travis/CI As an example look to the travis install script .","title":"Installation"},{"location":"install/#notes","text":"This library relies on FFMpeg binaries ffmpeg is required by VideoConverter , VideoVideoAnalyzer and VideoThumbGenerator . ffprobe is required by VideoInfoReader .","title":"Notes"},{"location":"integration/","text":"Integration \u00b6 Framework(s) integration \u00b6 No framework integration have been done yet... Open a P/R or send us a link. zend-expressive (wip) Laravel (todo) Symfony (todo) The PSR-11/container way \u00b6 Mediatools is PSR-11/container friendly and provides some ready to use factories. Create a config file \u00b6 <?php return [ 'soluble-mediatools' => [ 'ffmpeg.binary' => 'ffmpeg' , // Or a complete path /opt/local/ffmpeg/bin/ffmpeg //'ffmpeg.threads' => null, // <null>: single thread; <0>: number of cores, <1+>: number of threads //'ffmpeg.timeout' => null, // <null>: no timeout, <number>: number of seconds before timing-out //'ffmpeg.idle_timeout' => null, // <null>: no idle timeout, <number>: number of seconds of inactivity before timing-out //'ffmpeg.env' => [], // An array of additional env vars to set when running the ffmpeg conversion process 'ffprobe.binary' => 'ffprobe' , // Or a complete path /opt/local/ffmpeg/bin/ffprobe //'ffprobe.timeout' => null, // <null>: no timeout, <number>: number of seconds before timing-out //'ffprobe.idle_timeout' => null, // <null>: no idle timeout, <number>: number of seconds of inactivity before timing-out //'ffprobe.env' => [], // An array of additional env vars to set when running the ffprobe ], ]; Tip: Have a look to the config/soluble-mediatools.config.php file for most up-to-date info about defaults. Registration \u00b6 Require the config file and feed your container (example with zend-servicemanager) <?php use Zend\\ServiceManager\\ServiceManager ; use Soluble\\MediaTools\\Video\\Config\\ConfigProvider ; $config = require ( '/path/config/soluble-mediatools.config.php' ); // Service manager $container = new ServiceManager ( array_merge ([ // In Zend\\ServiceManager configuration will be set // in 'services'.'config'. 'services' => [ 'config' => $config ]], // Here the factories ( new ConfigProvider ()) -> getDependencies () )); Tip: Have a look to the ConfigProvider class to get some ideas about registered factories / aliases","title":"Integration"},{"location":"integration/#integration","text":"","title":"Integration"},{"location":"integration/#frameworks-integration","text":"No framework integration have been done yet... Open a P/R or send us a link. zend-expressive (wip) Laravel (todo) Symfony (todo)","title":"Framework(s) integration"},{"location":"integration/#the-psr-11container-way","text":"Mediatools is PSR-11/container friendly and provides some ready to use factories.","title":"The PSR-11/container way"},{"location":"integration/#create-a-config-file","text":"<?php return [ 'soluble-mediatools' => [ 'ffmpeg.binary' => 'ffmpeg' , // Or a complete path /opt/local/ffmpeg/bin/ffmpeg //'ffmpeg.threads' => null, // <null>: single thread; <0>: number of cores, <1+>: number of threads //'ffmpeg.timeout' => null, // <null>: no timeout, <number>: number of seconds before timing-out //'ffmpeg.idle_timeout' => null, // <null>: no idle timeout, <number>: number of seconds of inactivity before timing-out //'ffmpeg.env' => [], // An array of additional env vars to set when running the ffmpeg conversion process 'ffprobe.binary' => 'ffprobe' , // Or a complete path /opt/local/ffmpeg/bin/ffprobe //'ffprobe.timeout' => null, // <null>: no timeout, <number>: number of seconds before timing-out //'ffprobe.idle_timeout' => null, // <null>: no idle timeout, <number>: number of seconds of inactivity before timing-out //'ffprobe.env' => [], // An array of additional env vars to set when running the ffprobe ], ]; Tip: Have a look to the config/soluble-mediatools.config.php file for most up-to-date info about defaults.","title":"Create a config file"},{"location":"integration/#registration","text":"Require the config file and feed your container (example with zend-servicemanager) <?php use Zend\\ServiceManager\\ServiceManager ; use Soluble\\MediaTools\\Video\\Config\\ConfigProvider ; $config = require ( '/path/config/soluble-mediatools.config.php' ); // Service manager $container = new ServiceManager ( array_merge ([ // In Zend\\ServiceManager configuration will be set // in 'services'.'config'. 'services' => [ 'config' => $config ]], // Here the factories ( new ConfigProvider ()) -> getDependencies () )); Tip: Have a look to the ConfigProvider class to get some ideas about registered factories / aliases","title":"Registration"},{"location":"video-conversion-service/","text":"The VideoConverter service acts as a wrapper over ffmpeg and helps with video conversions, clipping, filters, scaling... It exposes an immutable api for conversion parameters and attempt to make debugging easier with clean exceptions. You can also inject any psr-3 compatible logger if you don't want to log issues by yourself. <?php use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\Exception\\ConverterExceptionInterface ; use Soluble\\MediaTools\\Video\\ { VideoConverter , VideoConvertParams }; $converter = new VideoConverter ( new FFMpegConfig ( '/path/to/ffmpeg' )); $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) -> withStreamable ( true ) -> withCrf ( 24 ); try { $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.mp4' , $params ); } catch ( ConverterExceptionInterface $e ) { // See chapter about exception !!! } Requirements \u00b6 You'll need to have ffmpeg installed on your system. Initialization \u00b6 The VideoConverter requires an FFMpegConfig object as first parameter. This is where you set the location of the ffmpeg binary, the number of threads you allow for conversions and the various timeouts if needed. The second parameter can be used to inject any psr-3 compatible logger . <?php use Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig , FFMpegConfigInterface }; use Soluble\\MediaTools\\Video\\VideoConverter ; $converter = new VideoConverter ( // @param FFMpegConfigInterface new FFMpegConfig ( // (?string) - path to ffmpeg binary (default: ffmpeg/ffmpeg.exe) $binary = null , // (?int) - ffmpeg default threads (null: single-thread) $threads = null , // (?float) - max time in seconds for ffmpeg process (null: disable) $timeout = null , // (?float) - max idle time in seconds for ffmpeg process $idleTimeout = null , // (array) - additional environment variables $env = [] ), // @param ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`. $logger = null ); Tip: initialize in a container (psr-11) It's a good idea to register services in a container. Depending on available framework integrations, you may have a look to the VideoConverterFactory and/or FFMpegConfigFactory to get an example based on a psr-11 compatible container. See also the provided default configuration file. Usage \u00b6 Conversion \u00b6 Typically you'll use the VideoConverter::convert() method in which you specify the input/output files as well as the conversion params. <?php $conversionService -> convert ( '/path/inputFile.mov' , // Output file will be automatically 'shell' escaped, '/path/outputFile.mp4' , ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) ); The convert() method will automatically set the process timeouts, logger... as specified during service initialization. What if I need more control over the process ? (advanced usage) You can use the VideoConverter::getSymfonyProcess(string $inputFile, string $outputFile, VideoConvertParamsInterface $convertParams, ?ProcessParamsInterface $processParams = null): Process to get more control on the conversion process. <?php $process = $conversionService -> getSymfonyProcess ( '/path/inputFile.mov' , '/path/outputFile.mp4' , ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) ); $process -> start (); foreach ( $process as $type => $data ) { if ( $process :: OUT === $type ) { echo \" \\n Read from stdout: \" . $data ; } else { // $process::ERR === $type echo \" \\n Read from stderr: \" . $data ; } } Have a look to the symfony/process documentation for more recipes. Parameters \u00b6 The Video\\VideoConvertParams exposes an immutable api that attempt to mimic ffmpeg params. <?php use Soluble\\MediaTools\\Video\\VideoConvertParams ; $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) -> withStreamable ( true ) -> withCrf ( 24 ) -> withPreset ( 'fast' ) -> withAudioCodec ( 'aac' ) -> withAudioBitrate ( '128k' ); Immutable api, what does it change for me ? (vs fluent) VideoConvertParams exposes an immutable style api ( ->withXXX() , like PSR-7 for example) . It means that the original object is never touched, the withXXX() methods will return a newly created object. Please be aware of it especially if you're used to fluent interfaces as both expose chainable methods... your primary reflexes might cause pain: <?php $params = ( new VideoConvertParams ()); $newParams = $params -> withVideoCodec ( 'libx264' ); // $params used here are empty (incorrect usage) $converter -> convert ( 'i.mov' , 'output' , $params ); // $newParams have been initialized with video codec (correct) $converter -> convert ( 'i.mov' , 'output' , $newParams ); Here's a list of categorized built-in methods you can use. See the ffmpeg doc for more information. Video options: Method FFmpeg arg(s) Example(s) Note(s) withVideoCodec(string) -c:v \u25cc libx264\u2026 any supported ffmpeg codec withVideoBitrate(string) -b:v \u25cc 750k,2M\u2026 constant bit rate withVideoMinBitrate(string) -minrate \u25cc 750k,2M\u2026 min variable bitrate withVideoMaxBitrate(string) -maxrate \u25cc 750k,2M\u2026 max variable bitrate withCrf(int) -crf \u25cc 32,\u2026 constant rate factor withStreamable() -movflags +faststart mp4 container only withPixFmt(string) -pix_fmt \u25cc yuv420p Default ' no change ' withQuality(string) -quality \u25cc good,medium\u2026 withPreset(string) -preset \u25cc fast\u2026 withTune(string) -tune \u25cc film\u2026 withVideoQualityScale(int) -qscale:v \u25cc withTileColumns(int) -tile-columns \u25cc 10\u2026 vp9 related withKeyframeSpacing(int) -g \u25cc 240\u2026 vp9 related withFrameParallel(int) -frame-parallel \u25cc 2\u2026 vp9 related withLagInFrames(int) -lag-in-frames \u25cc 25 vp9, use with autoAltRef withAutoAltRef(int) -auto-alt-ref \u25cc 1 vp9, use with lagInFrames Audio options: Method FFmpeg arg(s) Example(s) Note(s) withAudioCodec(string) -c:a \u25cc aac,mp3\u2026 webm requires vorbis/opus withAudioBitrate(string) -b:a \u25cc 128k\u2026 withNoAudio() -an removes all audio tracks Seeking/clipping options: Method FFmpeg arg(s) Example(s) Note(s) withSeekStart(SeekTime) -ss \u25cc SeekTime::createFromHms('0:00:01.9') withSeekEnd(SeekTime) -to \u25cc new SeekTime(120.456) withVideoFrames(int) -frames:v \u25cc 1000\u2026 Only \u25cc frames Filter related: Method FFmpeg arg(s) Example(s) Note(s) withFilter(VideoFilterInterface) -filter:v \u25cc See doc section about filters General process options: Method FFmpeg arg(s) Example(s) Note(s) withSpeed(int) -speed \u25cc 1,2,3\u2026 for vp9 or multipass withThreads(int) -threads \u25cc 0,1,2\u2026 by default uses FFMpegConfig withOutputFormat(string) -format \u25cc mp4,webm\u2026 file extension (if not provided) withOverwrite() -y by default. overwrite if file exists withNoOverwrite() throw exception if output exists Multipass related Method FFmpeg arg(s) Example(s) Note(s) withPassLogFile(string) -passlogfile \u25cc Ex: `tempnam(sys_get_temp_dir(), 'ffmpeg-log') withPass(int) -pass \u25cc 1 or 2 Other methods: Method Note(s) withConvertParam(VideoConvertParamInterface) With extra VideoConvertParams (will be merged) withBuiltInParam(string, mixed) With any supported built-in param, see constants . withoutParam(string) Without the specified parameter. getParam(string $param): mixed Return the param calue or throw UnsetParamExeption if not set. hasParam(string $param): bool Whether the param has been set. toArray(): array Return the object as array. To get the latest list of built-ins, see the VideoConvertParamsInterface and FFMpegAdapter sources. Filters \u00b6 Video filters can be set to the VideoConvertParams through the ->withVideoFilter(VideoFilterInterface $videoFilter) method: <?php use Soluble\\MediaTools\\Video\\Filter ; $params = ( new VideoConvertParams ()) -> withVideoFilter ( new Filter\\VideoFilterChain ([ // A scaling filter new Filter\\ScaleFilter ( 800 , 600 ), // A denoise filter new Filter\\Hqdn3DVideoFilter () ]) ); See the complete video filters doc here Exceptions \u00b6 All conversion exceptions implements Soluble\\MediaTools\\VideoException\\ConverterExceptionInterface , interface., alternatively you can also : <?php use Soluble\\MediaTools\\Video\\ { VideoConverter , VideoConvertParams }; use Soluble\\MediaTools\\Video\\Exception as VE ; /** @var VideoConverter $converter */ $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'xxx' ); try { $converter -> convert ( 'i.mov' , 'o.mp4' , $params ); // All exception below implements VE\\ConverterExceptionInterface } catch ( VE\\MissingInputFileException $e ) { // 'i.mov does not exists echo $e -> getMessage (); } catch ( // The following 3 exceptions are linked to process // failure 'ffmpeg exit code != 0) and implements // // - `VE\\ConversionProcessExceptionInterface` // (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface) // // you can catch all them at once or separately: VE\\ProcessFailedException | VE\\ProcessSignaledException | VE\\ProcessTimedOutException $e ) { echo $e -> getMessage (); // Because they implement ProcessExceptionInterface // we can get a reference to the executed (symfony) process: $process = $e -> getProcess (); echo $process -> getExitCode (); echo $process -> getErrorOutput (); } catch ( VE\\ConverterExceptionInterface $e ) { // Other exceptions can be // // - VE\\RuntimeException // - VE\\InvalidParamException (should not happen) } Notes \u00b6 Compression \u00b6 Achieving a good level of compression while preserving quality is not that easy. Compression techniques will depend on the codec (h264, av1, vp9), the purpose (archive, streaming, vod...) and the size (and fps) of the original content. The mediatools VideoConverter is agnostic and does not offer any help, you'll need to set up your own set of parameters. There's a lot of ffmpeg recipes on internet that you can easily port, some interesting sources: FFMpeg VP9 encoding FFMpeg H.264 encoding Google VOD VP9 setting Variable or Constant Bitrate ? Or both ? tl;dr : VBR and CBR can be set together to ensure max quality within a target bitrate (streamability++). Variable Bitrate Variable bitrate (VBR) ensure that you\u2019d achieve the lowest possible file size at the highest possible quality under the given constraints. Use the VideoConvertParams::withBitrate() , withMaxBitrate() and withMinBitrate() methods to set what you want to achieve. But be warned bitrates must not be set blindly, to be effective they must be choosen in respect to video dimensions and fps. See VOD VP9 setting . Constant Bitrate The VideoConvertParams::withCrf() will set the Constant Rate Factor (CRF) setting for the x264, x265 and vp9 encoders. h26x: You can set the values between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point you will notice the quality degradation. For x264, sane values are between 18 and 28. The default is 23, so you can use this as a starting point. vpx: The CRF value can be from 0\u201363. Lower values mean better quality. Recommended values range from 15\u201335, with 31 being recommended for 1080p HD video Please also be sure to understand what rate control modes are (you can see here and here and how to choose the one you need. Performance \u00b6 Conversions are heavy dudes, things that can help: Increasing the FfmpegConfig threads parameter can help for some tasks. Order of parameters can help. i.e: if you need to clip, makes it before applying filters. Recipes \u00b6 Transcode to mp4/x264/aac \u00b6 See the official H264 doc. <?php use Soluble\\MediaTools\\Video\\ { Exception , VideoConvertParams }; use Soluble\\MediaTools\\Video\\VideoConverterInterface ; $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) -> withAudioCodec ( 'aac' ) -> withAudioBitrate ( '128k' ) -> withStreamable ( true ) // Add streamable options (movflags & faststart) -> withCrf ( 24 ) // Level of compression: better size / less visual quality -> withPreset ( 'fast' ); // Optional: see presets try { /** @var VideoConverterInterface $converter */ $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.mp4' , $params ); } catch ( Exception\\ConverterExceptionInterface $e ) { // See chapters about exception !!! } Transcode to webm/vp9/opus \u00b6 See the official ffmpeg VP9 docs and have a look at the google vp9 VOD guidelines <?php use Soluble\\MediaTools\\Video\\ { Exception , VideoConvertParams }; use Soluble\\MediaTools\\Video\\VideoConverterInterface ; $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libvpx-vp9' ) -> withVideoBitrate ( '750k' ) -> withQuality ( 'good' ) -> withCrf ( 33 ) -> withAudioCodec ( 'libopus' ) -> withAudioBitrate ( '128k' ) /** * It is recommended to allow up to 240 frames of video between keyframes (8 seconds for 30fps content). * Keyframes are video frames which are self-sufficient; they don't rely upon any other frames to render * but they tend to be larger than other frame types. * For web and mobile playback, generous spacing between keyframes allows the encoder to choose the best * placement of keyframes to maximize quality. */ -> withKeyframeSpacing ( 240 ) // Most of the current VP9 decoders use tile-based, multi-threaded decoding. // In order for the decoders to take advantage of multiple cores, // the encoder must set tile-columns and frame-parallel. -> withTileColumns ( 2 ) -> withFrameParallel ( 1 ) -> withSpeed ( 1 ) // Optional: Use videoprobe to be sure of color conversions if any needed // ->withPixFmt('yuv420p') -> withOutputFormat ( 'webm' ); try { /** @var VideoConverterInterface $converter */ $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.webm' , $params ); } catch ( Exception\\ConverterExceptionInterface $e ) { // see chapter about exceptions } Video scaling \u00b6 See also ffmpeg doc <?php use Soluble\\MediaTools\\Video\\ { Exception , VideoConvertParams , SeekTime }; use Soluble\\MediaTools\\Video\\Filter\\ScaleFilter ; $params = ( new VideoConvertParams ()) -> withVideoFilter ( new ScaleFilter ( // $width: as an int or any ffmpeg supported placeholder: iw*0.5, ... 800 , // $height: as an int or any ffmpeg supported placeholder: ih*0.5, ... 'ih*0.5' , // $aspect_ratio_mode (increase or decrease) ScaleFilter :: OPTION_ASPECT_RATIO_INCREASE ) ); try { /** @var \\Soluble\\MediaTools\\Video\\VideoConverterInterface $videoConverter */ $videoConverter -> convert ( '/path/inputFile.mp4' , '/path/outputFile.mp4' , $params ); } catch ( Exception\\ConverterExceptionInterface $e ) { // see chapter about exceptions } Video clipping \u00b6 See the official ffmpeg docs <?php use Soluble\\MediaTools\\Video\\ { Exception , VideoConvertParams , SeekTime }; $params = ( new VideoConvertParams ()) -> withSeekStart ( new SeekTime ( 10.242 )) // 10 sec, 242 milli -> withSeekEnd ( SeekTime :: createFromHMS ( '12:52.015' )); // 12 mins, 52 secs... try { /** @var \\Soluble\\MediaTools\\Video\\VideoConverterInterface $videoConverter */ $videoConverter -> convert ( '/path/inputFile.mp4' , '/path/outputFile.mp4' , $params ); } catch ( Exception\\ConverterExceptionInterface $e ) { // see chapter about exceptions } Multipass encoding \u00b6 <?php use Soluble\\MediaTools\\Video\\ { VideoConvertParams , VideoConvertParamsInterface }; use Soluble\\MediaTools\\Common\\IO\\PlatformNullFile ; // Where to store the result of first pass analysis $logFile = tempnam ( sys_get_temp_dir (), 'ffmpeg-passlog' ); $pass1Params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libvpx-vp9' ) -> withVideoBitrate ( '1M' ) -> withVideoMaxBitrate ( '1500k' ) -> withVideoMinBitrate ( '750k' ) -> withKeyframeSpacing ( 240 ) -> withTileColumns ( 1 ) -> withFrameParallel ( 1 ) // Set the pass number -> withPass ( 1 ) // Set the ffmpeg logfile -> withPassLogFile ( $logFile ) // Speed in first pass can be faster -> withSpeed ( 4 ) // Audio does not need to be analyzed -> withNoAudio () // Because we will pipe it to /dev/null // we need to specify container -> withOutputFormat ( 'webm' ); // PASS 1 Conversion $this -> videoConvert -> convert ( '/tmp/input.mov' , // In first pass we don't need to output the conversion result // let's put in /dev/null. new PlatformNullFile (), $pass1Params ); // Let's init pass 2 params from pass 1 $pass2Params = $pass1Params // reinit audio -> withoutParam ( VideoConvertParamsInterface :: PARAM_NOAUDIO ) -> withAudioCodec ( 'libopus' ) -> withAudioBitrate ( '256k' ) // Reset the pass number -> withPass ( 2 ) // Speed in second pass must be slower -> withSpeed ( 1 ); $this -> videoConvert -> convert ( '/tmp/input.mov' , '/tmp/output.webm' , $pass2Params );","title":"\u2714 VideoConverter"},{"location":"video-conversion-service/#requirements","text":"You'll need to have ffmpeg installed on your system.","title":"Requirements"},{"location":"video-conversion-service/#initialization","text":"The VideoConverter requires an FFMpegConfig object as first parameter. This is where you set the location of the ffmpeg binary, the number of threads you allow for conversions and the various timeouts if needed. The second parameter can be used to inject any psr-3 compatible logger . <?php use Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig , FFMpegConfigInterface }; use Soluble\\MediaTools\\Video\\VideoConverter ; $converter = new VideoConverter ( // @param FFMpegConfigInterface new FFMpegConfig ( // (?string) - path to ffmpeg binary (default: ffmpeg/ffmpeg.exe) $binary = null , // (?int) - ffmpeg default threads (null: single-thread) $threads = null , // (?float) - max time in seconds for ffmpeg process (null: disable) $timeout = null , // (?float) - max idle time in seconds for ffmpeg process $idleTimeout = null , // (array) - additional environment variables $env = [] ), // @param ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`. $logger = null ); Tip: initialize in a container (psr-11) It's a good idea to register services in a container. Depending on available framework integrations, you may have a look to the VideoConverterFactory and/or FFMpegConfigFactory to get an example based on a psr-11 compatible container. See also the provided default configuration file.","title":"Initialization"},{"location":"video-conversion-service/#usage","text":"","title":"Usage"},{"location":"video-conversion-service/#conversion","text":"Typically you'll use the VideoConverter::convert() method in which you specify the input/output files as well as the conversion params. <?php $conversionService -> convert ( '/path/inputFile.mov' , // Output file will be automatically 'shell' escaped, '/path/outputFile.mp4' , ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) ); The convert() method will automatically set the process timeouts, logger... as specified during service initialization. What if I need more control over the process ? (advanced usage) You can use the VideoConverter::getSymfonyProcess(string $inputFile, string $outputFile, VideoConvertParamsInterface $convertParams, ?ProcessParamsInterface $processParams = null): Process to get more control on the conversion process. <?php $process = $conversionService -> getSymfonyProcess ( '/path/inputFile.mov' , '/path/outputFile.mp4' , ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) ); $process -> start (); foreach ( $process as $type => $data ) { if ( $process :: OUT === $type ) { echo \" \\n Read from stdout: \" . $data ; } else { // $process::ERR === $type echo \" \\n Read from stderr: \" . $data ; } } Have a look to the symfony/process documentation for more recipes.","title":"Conversion"},{"location":"video-conversion-service/#parameters","text":"The Video\\VideoConvertParams exposes an immutable api that attempt to mimic ffmpeg params. <?php use Soluble\\MediaTools\\Video\\VideoConvertParams ; $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) -> withStreamable ( true ) -> withCrf ( 24 ) -> withPreset ( 'fast' ) -> withAudioCodec ( 'aac' ) -> withAudioBitrate ( '128k' ); Immutable api, what does it change for me ? (vs fluent) VideoConvertParams exposes an immutable style api ( ->withXXX() , like PSR-7 for example) . It means that the original object is never touched, the withXXX() methods will return a newly created object. Please be aware of it especially if you're used to fluent interfaces as both expose chainable methods... your primary reflexes might cause pain: <?php $params = ( new VideoConvertParams ()); $newParams = $params -> withVideoCodec ( 'libx264' ); // $params used here are empty (incorrect usage) $converter -> convert ( 'i.mov' , 'output' , $params ); // $newParams have been initialized with video codec (correct) $converter -> convert ( 'i.mov' , 'output' , $newParams ); Here's a list of categorized built-in methods you can use. See the ffmpeg doc for more information. Video options: Method FFmpeg arg(s) Example(s) Note(s) withVideoCodec(string) -c:v \u25cc libx264\u2026 any supported ffmpeg codec withVideoBitrate(string) -b:v \u25cc 750k,2M\u2026 constant bit rate withVideoMinBitrate(string) -minrate \u25cc 750k,2M\u2026 min variable bitrate withVideoMaxBitrate(string) -maxrate \u25cc 750k,2M\u2026 max variable bitrate withCrf(int) -crf \u25cc 32,\u2026 constant rate factor withStreamable() -movflags +faststart mp4 container only withPixFmt(string) -pix_fmt \u25cc yuv420p Default ' no change ' withQuality(string) -quality \u25cc good,medium\u2026 withPreset(string) -preset \u25cc fast\u2026 withTune(string) -tune \u25cc film\u2026 withVideoQualityScale(int) -qscale:v \u25cc withTileColumns(int) -tile-columns \u25cc 10\u2026 vp9 related withKeyframeSpacing(int) -g \u25cc 240\u2026 vp9 related withFrameParallel(int) -frame-parallel \u25cc 2\u2026 vp9 related withLagInFrames(int) -lag-in-frames \u25cc 25 vp9, use with autoAltRef withAutoAltRef(int) -auto-alt-ref \u25cc 1 vp9, use with lagInFrames Audio options: Method FFmpeg arg(s) Example(s) Note(s) withAudioCodec(string) -c:a \u25cc aac,mp3\u2026 webm requires vorbis/opus withAudioBitrate(string) -b:a \u25cc 128k\u2026 withNoAudio() -an removes all audio tracks Seeking/clipping options: Method FFmpeg arg(s) Example(s) Note(s) withSeekStart(SeekTime) -ss \u25cc SeekTime::createFromHms('0:00:01.9') withSeekEnd(SeekTime) -to \u25cc new SeekTime(120.456) withVideoFrames(int) -frames:v \u25cc 1000\u2026 Only \u25cc frames Filter related: Method FFmpeg arg(s) Example(s) Note(s) withFilter(VideoFilterInterface) -filter:v \u25cc See doc section about filters General process options: Method FFmpeg arg(s) Example(s) Note(s) withSpeed(int) -speed \u25cc 1,2,3\u2026 for vp9 or multipass withThreads(int) -threads \u25cc 0,1,2\u2026 by default uses FFMpegConfig withOutputFormat(string) -format \u25cc mp4,webm\u2026 file extension (if not provided) withOverwrite() -y by default. overwrite if file exists withNoOverwrite() throw exception if output exists Multipass related Method FFmpeg arg(s) Example(s) Note(s) withPassLogFile(string) -passlogfile \u25cc Ex: `tempnam(sys_get_temp_dir(), 'ffmpeg-log') withPass(int) -pass \u25cc 1 or 2 Other methods: Method Note(s) withConvertParam(VideoConvertParamInterface) With extra VideoConvertParams (will be merged) withBuiltInParam(string, mixed) With any supported built-in param, see constants . withoutParam(string) Without the specified parameter. getParam(string $param): mixed Return the param calue or throw UnsetParamExeption if not set. hasParam(string $param): bool Whether the param has been set. toArray(): array Return the object as array. To get the latest list of built-ins, see the VideoConvertParamsInterface and FFMpegAdapter sources.","title":"Parameters"},{"location":"video-conversion-service/#filters","text":"Video filters can be set to the VideoConvertParams through the ->withVideoFilter(VideoFilterInterface $videoFilter) method: <?php use Soluble\\MediaTools\\Video\\Filter ; $params = ( new VideoConvertParams ()) -> withVideoFilter ( new Filter\\VideoFilterChain ([ // A scaling filter new Filter\\ScaleFilter ( 800 , 600 ), // A denoise filter new Filter\\Hqdn3DVideoFilter () ]) ); See the complete video filters doc here","title":"Filters"},{"location":"video-conversion-service/#exceptions","text":"All conversion exceptions implements Soluble\\MediaTools\\VideoException\\ConverterExceptionInterface , interface., alternatively you can also : <?php use Soluble\\MediaTools\\Video\\ { VideoConverter , VideoConvertParams }; use Soluble\\MediaTools\\Video\\Exception as VE ; /** @var VideoConverter $converter */ $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'xxx' ); try { $converter -> convert ( 'i.mov' , 'o.mp4' , $params ); // All exception below implements VE\\ConverterExceptionInterface } catch ( VE\\MissingInputFileException $e ) { // 'i.mov does not exists echo $e -> getMessage (); } catch ( // The following 3 exceptions are linked to process // failure 'ffmpeg exit code != 0) and implements // // - `VE\\ConversionProcessExceptionInterface` // (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface) // // you can catch all them at once or separately: VE\\ProcessFailedException | VE\\ProcessSignaledException | VE\\ProcessTimedOutException $e ) { echo $e -> getMessage (); // Because they implement ProcessExceptionInterface // we can get a reference to the executed (symfony) process: $process = $e -> getProcess (); echo $process -> getExitCode (); echo $process -> getErrorOutput (); } catch ( VE\\ConverterExceptionInterface $e ) { // Other exceptions can be // // - VE\\RuntimeException // - VE\\InvalidParamException (should not happen) }","title":"Exceptions"},{"location":"video-conversion-service/#notes","text":"","title":"Notes"},{"location":"video-conversion-service/#compression","text":"Achieving a good level of compression while preserving quality is not that easy. Compression techniques will depend on the codec (h264, av1, vp9), the purpose (archive, streaming, vod...) and the size (and fps) of the original content. The mediatools VideoConverter is agnostic and does not offer any help, you'll need to set up your own set of parameters. There's a lot of ffmpeg recipes on internet that you can easily port, some interesting sources: FFMpeg VP9 encoding FFMpeg H.264 encoding Google VOD VP9 setting Variable or Constant Bitrate ? Or both ? tl;dr : VBR and CBR can be set together to ensure max quality within a target bitrate (streamability++). Variable Bitrate Variable bitrate (VBR) ensure that you\u2019d achieve the lowest possible file size at the highest possible quality under the given constraints. Use the VideoConvertParams::withBitrate() , withMaxBitrate() and withMinBitrate() methods to set what you want to achieve. But be warned bitrates must not be set blindly, to be effective they must be choosen in respect to video dimensions and fps. See VOD VP9 setting . Constant Bitrate The VideoConvertParams::withCrf() will set the Constant Rate Factor (CRF) setting for the x264, x265 and vp9 encoders. h26x: You can set the values between 0 and 51, where lower values would result in better quality, at the expense of higher file sizes. Higher values mean more compression, but at some point you will notice the quality degradation. For x264, sane values are between 18 and 28. The default is 23, so you can use this as a starting point. vpx: The CRF value can be from 0\u201363. Lower values mean better quality. Recommended values range from 15\u201335, with 31 being recommended for 1080p HD video Please also be sure to understand what rate control modes are (you can see here and here and how to choose the one you need.","title":"Compression"},{"location":"video-conversion-service/#performance","text":"Conversions are heavy dudes, things that can help: Increasing the FfmpegConfig threads parameter can help for some tasks. Order of parameters can help. i.e: if you need to clip, makes it before applying filters.","title":"Performance"},{"location":"video-conversion-service/#recipes","text":"","title":"Recipes"},{"location":"video-conversion-service/#transcode-to-mp4x264aac","text":"See the official H264 doc. <?php use Soluble\\MediaTools\\Video\\ { Exception , VideoConvertParams }; use Soluble\\MediaTools\\Video\\VideoConverterInterface ; $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libx264' ) -> withAudioCodec ( 'aac' ) -> withAudioBitrate ( '128k' ) -> withStreamable ( true ) // Add streamable options (movflags & faststart) -> withCrf ( 24 ) // Level of compression: better size / less visual quality -> withPreset ( 'fast' ); // Optional: see presets try { /** @var VideoConverterInterface $converter */ $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.mp4' , $params ); } catch ( Exception\\ConverterExceptionInterface $e ) { // See chapters about exception !!! }","title":"Transcode to mp4/x264/aac"},{"location":"video-conversion-service/#transcode-to-webmvp9opus","text":"See the official ffmpeg VP9 docs and have a look at the google vp9 VOD guidelines <?php use Soluble\\MediaTools\\Video\\ { Exception , VideoConvertParams }; use Soluble\\MediaTools\\Video\\VideoConverterInterface ; $params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libvpx-vp9' ) -> withVideoBitrate ( '750k' ) -> withQuality ( 'good' ) -> withCrf ( 33 ) -> withAudioCodec ( 'libopus' ) -> withAudioBitrate ( '128k' ) /** * It is recommended to allow up to 240 frames of video between keyframes (8 seconds for 30fps content). * Keyframes are video frames which are self-sufficient; they don't rely upon any other frames to render * but they tend to be larger than other frame types. * For web and mobile playback, generous spacing between keyframes allows the encoder to choose the best * placement of keyframes to maximize quality. */ -> withKeyframeSpacing ( 240 ) // Most of the current VP9 decoders use tile-based, multi-threaded decoding. // In order for the decoders to take advantage of multiple cores, // the encoder must set tile-columns and frame-parallel. -> withTileColumns ( 2 ) -> withFrameParallel ( 1 ) -> withSpeed ( 1 ) // Optional: Use videoprobe to be sure of color conversions if any needed // ->withPixFmt('yuv420p') -> withOutputFormat ( 'webm' ); try { /** @var VideoConverterInterface $converter */ $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.webm' , $params ); } catch ( Exception\\ConverterExceptionInterface $e ) { // see chapter about exceptions }","title":"Transcode to webm/vp9/opus"},{"location":"video-conversion-service/#video-scaling","text":"See also ffmpeg doc <?php use Soluble\\MediaTools\\Video\\ { Exception , VideoConvertParams , SeekTime }; use Soluble\\MediaTools\\Video\\Filter\\ScaleFilter ; $params = ( new VideoConvertParams ()) -> withVideoFilter ( new ScaleFilter ( // $width: as an int or any ffmpeg supported placeholder: iw*0.5, ... 800 , // $height: as an int or any ffmpeg supported placeholder: ih*0.5, ... 'ih*0.5' , // $aspect_ratio_mode (increase or decrease) ScaleFilter :: OPTION_ASPECT_RATIO_INCREASE ) ); try { /** @var \\Soluble\\MediaTools\\Video\\VideoConverterInterface $videoConverter */ $videoConverter -> convert ( '/path/inputFile.mp4' , '/path/outputFile.mp4' , $params ); } catch ( Exception\\ConverterExceptionInterface $e ) { // see chapter about exceptions }","title":"Video scaling"},{"location":"video-conversion-service/#video-clipping","text":"See the official ffmpeg docs <?php use Soluble\\MediaTools\\Video\\ { Exception , VideoConvertParams , SeekTime }; $params = ( new VideoConvertParams ()) -> withSeekStart ( new SeekTime ( 10.242 )) // 10 sec, 242 milli -> withSeekEnd ( SeekTime :: createFromHMS ( '12:52.015' )); // 12 mins, 52 secs... try { /** @var \\Soluble\\MediaTools\\Video\\VideoConverterInterface $videoConverter */ $videoConverter -> convert ( '/path/inputFile.mp4' , '/path/outputFile.mp4' , $params ); } catch ( Exception\\ConverterExceptionInterface $e ) { // see chapter about exceptions }","title":"Video clipping"},{"location":"video-conversion-service/#multipass-encoding","text":"<?php use Soluble\\MediaTools\\Video\\ { VideoConvertParams , VideoConvertParamsInterface }; use Soluble\\MediaTools\\Common\\IO\\PlatformNullFile ; // Where to store the result of first pass analysis $logFile = tempnam ( sys_get_temp_dir (), 'ffmpeg-passlog' ); $pass1Params = ( new VideoConvertParams ()) -> withVideoCodec ( 'libvpx-vp9' ) -> withVideoBitrate ( '1M' ) -> withVideoMaxBitrate ( '1500k' ) -> withVideoMinBitrate ( '750k' ) -> withKeyframeSpacing ( 240 ) -> withTileColumns ( 1 ) -> withFrameParallel ( 1 ) // Set the pass number -> withPass ( 1 ) // Set the ffmpeg logfile -> withPassLogFile ( $logFile ) // Speed in first pass can be faster -> withSpeed ( 4 ) // Audio does not need to be analyzed -> withNoAudio () // Because we will pipe it to /dev/null // we need to specify container -> withOutputFormat ( 'webm' ); // PASS 1 Conversion $this -> videoConvert -> convert ( '/tmp/input.mov' , // In first pass we don't need to output the conversion result // let's put in /dev/null. new PlatformNullFile (), $pass1Params ); // Let's init pass 2 params from pass 1 $pass2Params = $pass1Params // reinit audio -> withoutParam ( VideoConvertParamsInterface :: PARAM_NOAUDIO ) -> withAudioCodec ( 'libopus' ) -> withAudioBitrate ( '256k' ) // Reset the pass number -> withPass ( 2 ) // Speed in second pass must be slower -> withSpeed ( 1 ); $this -> videoConvert -> convert ( '/tmp/input.mov' , '/tmp/output.webm' , $pass2Params );","title":"Multipass encoding"},{"location":"video-detection-service/","text":"The VideoAnalyzer service acts as a wrapper over ffmpeg and will analyze a video stream. It does not query video metadata (like ffprobe or the Video\\VideoInfoReader ) but really reads the video to infer some characteristics (currently only interlace detection is implemented...). <?php use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\Exception\\AnalyzerExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoAnalyzer ; $analyzer = new VideoAnalyzer ( new FFMpegConfig ( '/path/to/ffmpeg' )); try { $interlaceGuess = $analyzer -> detectInterlacement ( '/path/input.mov' , // Optional: // $maxFramesToAnalyze, default: 1000 $maxFramesToAnalyze = 200 ); } catch ( AnalyzerExceptionInterface $e ) { // See chapter about exception !!! } $interlaced = $interlaceGuess -> isInterlaced ( // Optional: // $threshold, default 0.25 (if >=25% interlaced frames, then true) 0.25 ); Requirements \u00b6 You'll need to have ffmpeg installed on your system. Initialization \u00b6 The VideoAnalyzer requires an FFMpegConfig object as first parameter. This is where you set the location of the ffmpeg binary, the number of threads you allow for conversions and the various timeouts if needed. The second parameter can be used to inject any psr-3 compatible logger . <?php use Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig , FFMpegConfigInterface }; use Soluble\\MediaTools\\Video\\VideoAnalyzer ; $converter = new VideoAnalyzer ( // @param FFMpegConfigInterface new FFMpegConfig ( // (?string) - path to ffmpeg binary (default: ffmpeg/ffmpeg.exe) $binary = null , // (?int) - ffmpeg default threads (null: single-thread) $threads = null , // (?float) - max time in seconds for ffmpeg process (null: disable) $timeout = null , // (?float) - max idle time in seconds for ffmpeg process $idleTimeout = null , // (array) - additional environment variables $env = [] ), // @param ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`. $logger = null ); Tip: initialize in a container (psr-11) It's a good idea to register services in a container. Depending on available framework integrations, you may have a look to the Video\\VideoAnalyzerFactory and/or FFMpegConfigFactory to get an example based on a psr-11 compatible container. See also the provided default configuration file. Usage \u00b6 Interlacement detection \u00b6 <?php use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\Exception\\AnalyzerExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoAnalyzer ; $analyzer = new VideoAnalyzer ( new FFMpegConfig ( '/path/to/ffmpeg' )); try { $interlaceGuess = $analyzer -> detectInterlacement ( '/path/input.mov' , // Optional: // $maxFramesToAnalyze, default: 1000 // (at 25fps -> 40 seconds) $maxFramesToAnalyze = 1000 ); } catch ( AnalyzerExceptionInterface $e ) { // See chapter about exception !!! } $interlaced = $interlaceGuess -> isInterlaced ( // Optional: // $threshold, default 0.25 (if >=25% interlaced frames, then true) 0.25 ); Exceptions \u00b6 You can safely catch exceptions with the generic Soluble\\MediaTools\\Video\\Exception\\ExceptionInterface , alternatively you can also : <?php use Soluble\\MediaTools\\Video\\VideoAnalyzer ; use Soluble\\MediaTools\\Video\\Exception as VE ; /** @var VideoAnalyzer $analyzer */ try { $interlaceGuess = $analyzer -> detectInterlacement ( '/path/input.mov' ); } catch ( VE\\MissingInputFileException $e ) { // 'i.mov does not exists echo $e -> getMessage (); } catch ( // The following 3 exeptions are linked to process // failure 'ffmpeg exit code != 0) and implements // // - `VE\\ConversionProcessExceptionInterface` // (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface) // // in case you want to catch them all-in-once VE\\ProcessFailedException | VE\\ProcessSignaledException | VE\\ProcessTimedOutException $e ) { echo $e -> getMessage (); // Because they implement ProcessExceptionInterface // we can get a reference to the executed (symfony) process: $process = $e -> getProcess (); echo $process -> getExitCode (); echo $process -> getErrorOutput (); } catch ( VE\\ConverterExceptionInterface $e ) { // Other exceptions can be // // - VE\\RuntimeException // - VE\\InvalidParamException (should not happen) } Recipes \u00b6 Convert with deinterlace detection \u00b6 <?php use Soluble\\MediaTools\\Video\\VideoAnalyzer ; use Soluble\\MediaTools\\Video\\Filter\\ { VideoFilterChain , Hqdn3DVideoFilter , YadifVideoFilter }; /** @var VideoAnalyzer $analyzer */ $interlaceGuess = $analyzer -> detectInterlacement ( '/path/input_video.mov' , // $max_frames_to_analyze: // - Less is faster... but let's assume some older // videos starts with black screen... 1500 at // 25fps = 60 seconds 1500 ); $convertParams = ( new \\Soluble\\MediaTools\\Video\\VideoConvertParams ()) -> withVideoCodec ( 'libvpx-vp9' ) -> withVideoBitrate ( '750k' ); // Add the deint and denoise filters only if 40% frames have been // detected as interlaced if ( $interlaceGuess -> isInterlaced ( $threshold = 0.4 )) { $convertParams = $convertParams -> withVideoFilter ( new VideoFilterChain ([ // This will deinterlace new YadifVideoFilter (), // This will slightly denoise new Hqdn3DVideoFilter () ]) ); } $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.webm' , $convertParams );","title":"\u2714 VideoAnalyzer"},{"location":"video-detection-service/#requirements","text":"You'll need to have ffmpeg installed on your system.","title":"Requirements"},{"location":"video-detection-service/#initialization","text":"The VideoAnalyzer requires an FFMpegConfig object as first parameter. This is where you set the location of the ffmpeg binary, the number of threads you allow for conversions and the various timeouts if needed. The second parameter can be used to inject any psr-3 compatible logger . <?php use Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig , FFMpegConfigInterface }; use Soluble\\MediaTools\\Video\\VideoAnalyzer ; $converter = new VideoAnalyzer ( // @param FFMpegConfigInterface new FFMpegConfig ( // (?string) - path to ffmpeg binary (default: ffmpeg/ffmpeg.exe) $binary = null , // (?int) - ffmpeg default threads (null: single-thread) $threads = null , // (?float) - max time in seconds for ffmpeg process (null: disable) $timeout = null , // (?float) - max idle time in seconds for ffmpeg process $idleTimeout = null , // (array) - additional environment variables $env = [] ), // @param ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`. $logger = null ); Tip: initialize in a container (psr-11) It's a good idea to register services in a container. Depending on available framework integrations, you may have a look to the Video\\VideoAnalyzerFactory and/or FFMpegConfigFactory to get an example based on a psr-11 compatible container. See also the provided default configuration file.","title":"Initialization"},{"location":"video-detection-service/#usage","text":"","title":"Usage"},{"location":"video-detection-service/#interlacement-detection","text":"<?php use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\Exception\\AnalyzerExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoAnalyzer ; $analyzer = new VideoAnalyzer ( new FFMpegConfig ( '/path/to/ffmpeg' )); try { $interlaceGuess = $analyzer -> detectInterlacement ( '/path/input.mov' , // Optional: // $maxFramesToAnalyze, default: 1000 // (at 25fps -> 40 seconds) $maxFramesToAnalyze = 1000 ); } catch ( AnalyzerExceptionInterface $e ) { // See chapter about exception !!! } $interlaced = $interlaceGuess -> isInterlaced ( // Optional: // $threshold, default 0.25 (if >=25% interlaced frames, then true) 0.25 );","title":"Interlacement detection"},{"location":"video-detection-service/#exceptions","text":"You can safely catch exceptions with the generic Soluble\\MediaTools\\Video\\Exception\\ExceptionInterface , alternatively you can also : <?php use Soluble\\MediaTools\\Video\\VideoAnalyzer ; use Soluble\\MediaTools\\Video\\Exception as VE ; /** @var VideoAnalyzer $analyzer */ try { $interlaceGuess = $analyzer -> detectInterlacement ( '/path/input.mov' ); } catch ( VE\\MissingInputFileException $e ) { // 'i.mov does not exists echo $e -> getMessage (); } catch ( // The following 3 exeptions are linked to process // failure 'ffmpeg exit code != 0) and implements // // - `VE\\ConversionProcessExceptionInterface` // (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface) // // in case you want to catch them all-in-once VE\\ProcessFailedException | VE\\ProcessSignaledException | VE\\ProcessTimedOutException $e ) { echo $e -> getMessage (); // Because they implement ProcessExceptionInterface // we can get a reference to the executed (symfony) process: $process = $e -> getProcess (); echo $process -> getExitCode (); echo $process -> getErrorOutput (); } catch ( VE\\ConverterExceptionInterface $e ) { // Other exceptions can be // // - VE\\RuntimeException // - VE\\InvalidParamException (should not happen) }","title":"Exceptions"},{"location":"video-detection-service/#recipes","text":"","title":"Recipes"},{"location":"video-detection-service/#convert-with-deinterlace-detection","text":"<?php use Soluble\\MediaTools\\Video\\VideoAnalyzer ; use Soluble\\MediaTools\\Video\\Filter\\ { VideoFilterChain , Hqdn3DVideoFilter , YadifVideoFilter }; /** @var VideoAnalyzer $analyzer */ $interlaceGuess = $analyzer -> detectInterlacement ( '/path/input_video.mov' , // $max_frames_to_analyze: // - Less is faster... but let's assume some older // videos starts with black screen... 1500 at // 25fps = 60 seconds 1500 ); $convertParams = ( new \\Soluble\\MediaTools\\Video\\VideoConvertParams ()) -> withVideoCodec ( 'libvpx-vp9' ) -> withVideoBitrate ( '750k' ); // Add the deint and denoise filters only if 40% frames have been // detected as interlaced if ( $interlaceGuess -> isInterlaced ( $threshold = 0.4 )) { $convertParams = $convertParams -> withVideoFilter ( new VideoFilterChain ([ // This will deinterlace new YadifVideoFilter (), // This will slightly denoise new Hqdn3DVideoFilter () ]) ); } $converter -> convert ( '/path/inputFile.mov' , '/path/outputFile.webm' , $convertParams );","title":"Convert with deinterlace detection"},{"location":"video-filters/","text":"Video filters \u00b6 Both VideoConverter and VideoThumbGenerator services allows setting up video filters through the ->withVideoFilter(VideoFilterInterface $videoFilter) method. What are video filters used for ? We try to keep close to what ffmpeg does. In ffmpeg filters accomplish tasks as different as cropping, scaling, identifying (interlace, black detection), denoising, parts selection, colouring, generators... The complete list of ffmpeg filters can be found here Mediatools provide some common filters implementations but it's very easy to create your own, see last section. <?php use Soluble\\MediaTools\\Video\\Filter ; $params = ( new VideoConvertParams ()) -> withVideoFilter ( new Filter\\VideoFilterChain ([ // A scaling filter new Filter\\ScaleFilter ( 800 , 600 ), // A denoise filter new Filter\\Hqdn3DVideoFilter (), // A custom filter new class implements Filter\\Type\\FFMpegVideoFilterInterface { public function getFFmpegCLIValue () : string { return 'frei0r=vertigo:0.2' ; } } ]) ); Built-in filters \u00b6 Filter Type Argument(s) Link(s) ScaleFilter Dimension $width, height, ? height, ? aspect_ratio_mode... src CropFilter ? width, ? width, ? height, ?$x, ? src YadifVideoFilter Deinterlace ? mode, ? mode, ? parity, ?$deint src Hqdn3DVideoFilter Denoise src NlmeansVideoFilter Denoise (slow) src Chaining filters \u00b6 VideoFilterChain \u00b6 To apply multiple filters, use the VideoFilterChain object. Filters will be processed in the order they've been added. <?php use Soluble\\MediaTools\\Video\\Filter ; // from the constructor $filters = new Filter\\VideoFilterChain ([ new Filter\\YadifVideoFilter (), new Filter\\Hqdn3DVideoFilter () ]); // Alternatively, use ->addFilter method $filters -> addFilter ( new Filter\\NlmeansVideoFilter ()); $params = ( new VideoConvertParams ()) -> withVideoFilter ( $filters ); // .... Filter graph support ? FFMpeg support a complex notation for advanced filter chaining named filtergraph . The VideoFilterChain does not support this notation to keep the surface API as intuitive as possible. If you need to use the filtergraph notation, you'll need to create your own filter: <?php $myComplexFilter = new class interface FFMpegVideoFilterInterface { public function getFFmpegCLIValue () : string { return '[in]yadif=0:0:0[middle];[middle]scale=iw/2:-1[out]' ; } } We contributions, if you have nice ideas about how to support filtergraph, make your voice loud in this issue Custom filter \u00b6 Making your own filter is easy, you just have to implement FFMpegVideoFilterInterface : <?php use Soluble\\MediaTools\\Video\\Filter\\Type\\FFMpegVideoFilterInterface ; $vertigoFilter = new class implements FFMpegVideoFilterInterface { public function getFFmpegCLIValue () : string { return 'frei0r=vertigo:0.2' ; } }; And voil\u00e0 !","title":"\u25a7 Filters notes"},{"location":"video-filters/#video-filters","text":"Both VideoConverter and VideoThumbGenerator services allows setting up video filters through the ->withVideoFilter(VideoFilterInterface $videoFilter) method. What are video filters used for ? We try to keep close to what ffmpeg does. In ffmpeg filters accomplish tasks as different as cropping, scaling, identifying (interlace, black detection), denoising, parts selection, colouring, generators... The complete list of ffmpeg filters can be found here Mediatools provide some common filters implementations but it's very easy to create your own, see last section. <?php use Soluble\\MediaTools\\Video\\Filter ; $params = ( new VideoConvertParams ()) -> withVideoFilter ( new Filter\\VideoFilterChain ([ // A scaling filter new Filter\\ScaleFilter ( 800 , 600 ), // A denoise filter new Filter\\Hqdn3DVideoFilter (), // A custom filter new class implements Filter\\Type\\FFMpegVideoFilterInterface { public function getFFmpegCLIValue () : string { return 'frei0r=vertigo:0.2' ; } } ]) );","title":"Video filters"},{"location":"video-filters/#built-in-filters","text":"Filter Type Argument(s) Link(s) ScaleFilter Dimension $width, height, ? height, ? aspect_ratio_mode... src CropFilter ? width, ? width, ? height, ?$x, ? src YadifVideoFilter Deinterlace ? mode, ? mode, ? parity, ?$deint src Hqdn3DVideoFilter Denoise src NlmeansVideoFilter Denoise (slow) src","title":"Built-in filters"},{"location":"video-filters/#chaining-filters","text":"","title":"Chaining filters"},{"location":"video-filters/#videofilterchain","text":"To apply multiple filters, use the VideoFilterChain object. Filters will be processed in the order they've been added. <?php use Soluble\\MediaTools\\Video\\Filter ; // from the constructor $filters = new Filter\\VideoFilterChain ([ new Filter\\YadifVideoFilter (), new Filter\\Hqdn3DVideoFilter () ]); // Alternatively, use ->addFilter method $filters -> addFilter ( new Filter\\NlmeansVideoFilter ()); $params = ( new VideoConvertParams ()) -> withVideoFilter ( $filters ); // .... Filter graph support ? FFMpeg support a complex notation for advanced filter chaining named filtergraph . The VideoFilterChain does not support this notation to keep the surface API as intuitive as possible. If you need to use the filtergraph notation, you'll need to create your own filter: <?php $myComplexFilter = new class interface FFMpegVideoFilterInterface { public function getFFmpegCLIValue () : string { return '[in]yadif=0:0:0[middle];[middle]scale=iw/2:-1[out]' ; } } We contributions, if you have nice ideas about how to support filtergraph, make your voice loud in this issue","title":"VideoFilterChain"},{"location":"video-filters/#custom-filter","text":"Making your own filter is easy, you just have to implement FFMpegVideoFilterInterface : <?php use Soluble\\MediaTools\\Video\\Filter\\Type\\FFMpegVideoFilterInterface ; $vertigoFilter = new class implements FFMpegVideoFilterInterface { public function getFFmpegCLIValue () : string { return 'frei0r=vertigo:0.2' ; } }; And voil\u00e0 !","title":"Custom filter"},{"location":"video-info-service/","text":"The VideoInfoReader service acts as a wrapper over ffprobe and return information about a video file. Requirements \u00b6 You'll need to have ffprobe installed on your system. Initialization \u00b6 The VideoInfoReader service requires an FFProbeConfig object as first parameter. If needed you can configure the location of the ffprobe binary and the various timeouts. The second parameter can be used to inject any psr-3 compatible logger . The third one, any psr-16 (simplecache) compatible cache . <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; $infoReader = new VideoInfoReader ( // @param FFMpegConfigInterface new FFProbeConfig ( // (?string) - path to ffprobe binary (default: ffprobe/ffprobe.exe) $binary = null , // (?float) - max time in seconds for ffprobe process (null: disable) $timeout = null , // (?float) - max idle time in seconds for ffprobe process $idleTimeout = null , // (array) - additional environment variables if needed $env = [] ), // @param \\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`. $logger = null , // @param \\Psr\\SimpleCache\\CacheInterface $cache = null ); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } Tip: initialize in a container (psr-11) It's a good idea to register services in a container. Depending on available framework integrations, you may have a look to the Video\\VideoInfoReaderFactory and/or FFProbeConfigFactory to get an example based on a psr-11 compatible container. See also the provided default configuration file. Usage \u00b6 Getting general info \u00b6 <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Info\\StreamTypeInterface ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } // Total duration $duration = $info -> getDuration (); $filesize = $info -> getFileSize (); // i.e 'mov,mp4,m4a,3gp,3g2,mj2' $format = $info -> getFormatName (); // Streams (will be detailled below) $info -> getVideoStreams (); $info -> getAudioStreams (); $info -> getSubtitleStreams (); Get video stream. \u00b6 Get video streams information. (generally one, i.e mkv containers can have multiple) <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\Exception\\NoStreamException ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } $videoStreams = $info -> getVideoStreams (); // Option 1: The iterable way foreach ( $videoStreams as $vStream ) { // ... } // Option 2: Take the first try { $video = $videoStreams -> getFirst (); } catch ( NoStreamException $e ) { // No video stream present } $video -> getCodecName (); // vp9 $video -> getFps ( $decimals = 0 ); // i.e: 24 $video -> getCodecTagString (); $video -> getFps ( $roundedDecimals = null ); $video -> getNbFrames (); $video -> getHeight (); $video -> getWidth (); $video -> getDuration (); $video -> getDurationTs (); $video -> getPixFmt (); $video -> getNbFrames (); $video -> getTimeBase (); $video -> getBitRate (); $video -> getTags (); $video -> getDisplayAspectRatio (); $video -> getSampleAspectRatio (); $video -> getCodedWidth (); $video -> getCodedHeight (); $video -> getRFrameRate (); $aspectRatio = $video -> getAspectRatio (); if ( $aspectRatio !== null ) { $aspectRatio -> getString (); // '16:9' $aspectRatio -> getX (); // float $aspectRatio -> getY (); // float } Get audio streams \u00b6 <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\Exception\\NoStreamException ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } $audioStreams = $info -> getAudioStreams (); // Option 1: The iterable way foreach ( $audioStreams as $aStream ) { // ... } // Option 2: take the first one try { $audio = $audioStreams -> getFirst (); } catch ( NoStreamException $e ) { // Nothing marked as audio } $audio -> getCodecName (); // aac $audio -> getCodecTagString (); $audio -> getDuration (); $audio -> getDurationTs (); $audio -> getTimeBase (); $audio -> getBitRate (); $audio -> getTags (); Get subtitle info \u00b6 <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\Exception\\NoStreamException ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } // For subtitle streams $subtitleStreams = $info -> getSubtitleStreams (); // Option 1: The iterable way foreach ( $subtitleStreams as $sStream ) { // ... } // Option 2: taking the first one try { $subtitle = $subtitleStreams -> getFirst (); } catch ( NoStreamException $e ) { // No subtitle streams } $subtitle -> getCodecName (); // webvtt Exceptions \u00b6 All info exceptions implements InfoReaderExceptionInterface interface. <?php use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception as VE ; /** @var VideoInfoReader $vis */ try { $info = $vis -> getInfo ( '/path/video.mov' ); // All exception below implements VE\\InfoReaderExceptionInterface } catch ( VE\\MissingInputFileException $e ) { // 'video.mov does not exists echo $e -> getMessage (); } catch ( // The following 3 exceptions are linked to process // failure 'ffmpeg exit code != 0) and implements // // - `VE\\ConversionProcessExceptionInterface` // (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface) // // you can catch all them at once or separately: VE\\ProcessFailedException | VE\\ProcessSignaledException | VE\\ProcessTimedOutException $e ) { echo $e -> getMessage (); // Because they implement ProcessExceptionInterface // we can get a reference to the executed (symfony) process: $process = $e -> getProcess (); echo $process -> getExitCode (); echo $process -> getErrorOutput (); } catch ( VE\\ConverterExceptionInterface $e ) { // Other exceptions can be // // - VE\\RuntimeException // - VE\\InvalidParamException (should not happen) } Metadata \u00b6 The VideoInfo::getMetadata() returns the ffprobe result, if you're wondering what it is, have a look to an example with ffprobe 4.0. Warning , direct use of ffprobe metadata if not ensured by semver, bc break can potentially happen. Metadata retrieval \u00b6 <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Info\\StreamTypeInterface ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } // Metadata as returned by ffprobe $info -> getMetadata (); // By stream $info -> getStreamsMetadataByType ( StreamTypeInterface :: VIDEO ); $info -> getStreamsMetadataByType ( StreamTypeInterface :: AUDIO ); $info -> getStreamsMetadataByType ( StreamTypeInterface :: SUBTITLE ); $info -> getStreamsMetadataByType ( StreamTypeInterface :: DATA ); $nbStreams = $info -> countStreams (); $nbVideoStreams = $info -> countStreams ( StreamTypeInterface :: VIDEO ); $nbAudioStreams = $info -> countStreams ( StreamTypeInterface :: AUDIO ); $nbSubStreams = $info -> countStreams ( StreamTypeInterface :: SUBTITLE ); Metadata example \u00b6 As returned by ffprobe <?php return [ 'streams' => [ 0 => [ 'index' => 0 , 'codec_name' => 'h264' , 'codec_long_name' => 'H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10' , 'profile' => 'Main' , 'codec_type' => 'video' , 'codec_time_base' => '81/2968' , 'codec_tag_string' => 'avc1' , 'codec_tag' => '0x31637661' , 'width' => 320 , 'height' => 180 , 'coded_width' => 320 , 'coded_height' => 180 , 'has_b_frames' => 2 , 'sample_aspect_ratio' => '1:1' , 'display_aspect_ratio' => '16:9' , 'pix_fmt' => 'yuv420p' , 'level' => 40 , 'color_range' => 'tv' , 'color_space' => 'smpte170m' , 'color_transfer' => 'bt709' , 'color_primaries' => 'smpte170m' , 'chroma_location' => 'left' , 'refs' => 1 , 'is_avc' => 'true' , 'nal_length_size' => '4' , 'r_frame_rate' => '120/1' , 'avg_frame_rate' => '1484/81' , 'time_base' => '1/90000' , 'start_pts' => 0 , 'start_time' => '0.000000' , 'duration_ts' => 5467500 , 'duration' => '60.750000' , 'bit_rate' => '39933' , 'bits_per_raw_sample' => '8' , 'nb_frames' => '1113' , 'disposition' => [ 'default' => 1 , 'dub' => 0 , 'original' => 0 , 'comment' => 0 , 'lyrics' => 0 , 'karaoke' => 0 , 'forced' => 0 , 'hearing_impaired' => 0 , 'visual_impaired' => 0 , 'clean_effects' => 0 , 'attached_pic' => 0 , 'timed_thumbnails' => 0 , ], 'tags' => [ 'creation_time' => '2018-07-04T14:51:24.000000Z' , 'language' => 'und' , 'handler_name' => 'VideoHandler' , ], ], 1 => [ 'index' => 1 , 'codec_name' => 'aac' , 'codec_long_name' => 'AAC (Advanced Audio Coding)' , 'profile' => 'LC' , 'codec_type' => 'audio' , 'codec_time_base' => '1/22050' , 'codec_tag_string' => 'mp4a' , 'codec_tag' => '0x6134706d' , 'sample_fmt' => 'fltp' , 'sample_rate' => '22050' , 'channels' => 1 , 'channel_layout' => 'mono' , 'bits_per_sample' => 0 , 'r_frame_rate' => '0/0' , 'avg_frame_rate' => '0/0' , 'time_base' => '1/22050' , 'start_pts' => 0 , 'start_time' => '0.000000' , 'duration_ts' => 1355766 , 'duration' => '61.485986' , 'bit_rate' => '84255' , 'max_bit_rate' => '84255' , 'nb_frames' => '1325' , 'disposition' => [ 'default' => 1 , 'dub' => 0 , 'original' => 0 , 'comment' => 0 , 'lyrics' => 0 , 'karaoke' => 0 , 'forced' => 0 , 'hearing_impaired' => 0 , 'visual_impaired' => 0 , 'clean_effects' => 0 , 'attached_pic' => 0 , 'timed_thumbnails' => 0 , ], 'tags' => [ 'creation_time' => '2018-07-04T14:51:24.000000Z' , 'language' => 'eng' , 'handler_name' => 'Mono' , ], ], ], 'format' => [ 'filename' => '/tmp/big_buck_bunny_low.m4v' , 'nb_streams' => 2 , 'nb_programs' => 0 , 'format_name' => 'mov,mp4,m4a,3gp,3g2,mj2' , 'format_long_name' => 'QuickTime / MOV' , 'start_time' => '0.000000' , 'duration' => '61.533000' , 'size' => '983115' , 'bit_rate' => '127816' , 'probe_score' => 100 , 'tags' => [ 'major_brand' => 'mp42' , 'minor_version' => '512' , 'compatible_brands' => 'isomiso2avc1mp41' , 'creation_time' => '2018-07-04T14:51:24.000000Z' , 'title' => 'big_buck_bunny' , 'encoder' => 'HandBrake 1.1.0 2018042400' , ], ] ];","title":"\u2714 VideoInfoReader"},{"location":"video-info-service/#requirements","text":"You'll need to have ffprobe installed on your system.","title":"Requirements"},{"location":"video-info-service/#initialization","text":"The VideoInfoReader service requires an FFProbeConfig object as first parameter. If needed you can configure the location of the ffprobe binary and the various timeouts. The second parameter can be used to inject any psr-3 compatible logger . The third one, any psr-16 (simplecache) compatible cache . <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; $infoReader = new VideoInfoReader ( // @param FFMpegConfigInterface new FFProbeConfig ( // (?string) - path to ffprobe binary (default: ffprobe/ffprobe.exe) $binary = null , // (?float) - max time in seconds for ffprobe process (null: disable) $timeout = null , // (?float) - max idle time in seconds for ffprobe process $idleTimeout = null , // (array) - additional environment variables if needed $env = [] ), // @param \\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`. $logger = null , // @param \\Psr\\SimpleCache\\CacheInterface $cache = null ); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } Tip: initialize in a container (psr-11) It's a good idea to register services in a container. Depending on available framework integrations, you may have a look to the Video\\VideoInfoReaderFactory and/or FFProbeConfigFactory to get an example based on a psr-11 compatible container. See also the provided default configuration file.","title":"Initialization"},{"location":"video-info-service/#usage","text":"","title":"Usage"},{"location":"video-info-service/#getting-general-info","text":"<?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Info\\StreamTypeInterface ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } // Total duration $duration = $info -> getDuration (); $filesize = $info -> getFileSize (); // i.e 'mov,mp4,m4a,3gp,3g2,mj2' $format = $info -> getFormatName (); // Streams (will be detailled below) $info -> getVideoStreams (); $info -> getAudioStreams (); $info -> getSubtitleStreams ();","title":"Getting general info"},{"location":"video-info-service/#get-video-stream","text":"Get video streams information. (generally one, i.e mkv containers can have multiple) <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\Exception\\NoStreamException ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } $videoStreams = $info -> getVideoStreams (); // Option 1: The iterable way foreach ( $videoStreams as $vStream ) { // ... } // Option 2: Take the first try { $video = $videoStreams -> getFirst (); } catch ( NoStreamException $e ) { // No video stream present } $video -> getCodecName (); // vp9 $video -> getFps ( $decimals = 0 ); // i.e: 24 $video -> getCodecTagString (); $video -> getFps ( $roundedDecimals = null ); $video -> getNbFrames (); $video -> getHeight (); $video -> getWidth (); $video -> getDuration (); $video -> getDurationTs (); $video -> getPixFmt (); $video -> getNbFrames (); $video -> getTimeBase (); $video -> getBitRate (); $video -> getTags (); $video -> getDisplayAspectRatio (); $video -> getSampleAspectRatio (); $video -> getCodedWidth (); $video -> getCodedHeight (); $video -> getRFrameRate (); $aspectRatio = $video -> getAspectRatio (); if ( $aspectRatio !== null ) { $aspectRatio -> getString (); // '16:9' $aspectRatio -> getX (); // float $aspectRatio -> getY (); // float }","title":"Get video stream."},{"location":"video-info-service/#get-audio-streams","text":"<?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\Exception\\NoStreamException ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } $audioStreams = $info -> getAudioStreams (); // Option 1: The iterable way foreach ( $audioStreams as $aStream ) { // ... } // Option 2: take the first one try { $audio = $audioStreams -> getFirst (); } catch ( NoStreamException $e ) { // Nothing marked as audio } $audio -> getCodecName (); // aac $audio -> getCodecTagString (); $audio -> getDuration (); $audio -> getDurationTs (); $audio -> getTimeBase (); $audio -> getBitRate (); $audio -> getTags ();","title":"Get audio streams"},{"location":"video-info-service/#get-subtitle-info","text":"<?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\Exception\\NoStreamException ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } // For subtitle streams $subtitleStreams = $info -> getSubtitleStreams (); // Option 1: The iterable way foreach ( $subtitleStreams as $sStream ) { // ... } // Option 2: taking the first one try { $subtitle = $subtitleStreams -> getFirst (); } catch ( NoStreamException $e ) { // No subtitle streams } $subtitle -> getCodecName (); // webvtt","title":"Get subtitle info"},{"location":"video-info-service/#exceptions","text":"All info exceptions implements InfoReaderExceptionInterface interface. <?php use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception as VE ; /** @var VideoInfoReader $vis */ try { $info = $vis -> getInfo ( '/path/video.mov' ); // All exception below implements VE\\InfoReaderExceptionInterface } catch ( VE\\MissingInputFileException $e ) { // 'video.mov does not exists echo $e -> getMessage (); } catch ( // The following 3 exceptions are linked to process // failure 'ffmpeg exit code != 0) and implements // // - `VE\\ConversionProcessExceptionInterface` // (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface) // // you can catch all them at once or separately: VE\\ProcessFailedException | VE\\ProcessSignaledException | VE\\ProcessTimedOutException $e ) { echo $e -> getMessage (); // Because they implement ProcessExceptionInterface // we can get a reference to the executed (symfony) process: $process = $e -> getProcess (); echo $process -> getExitCode (); echo $process -> getErrorOutput (); } catch ( VE\\ConverterExceptionInterface $e ) { // Other exceptions can be // // - VE\\RuntimeException // - VE\\InvalidParamException (should not happen) }","title":"Exceptions"},{"location":"video-info-service/#metadata","text":"The VideoInfo::getMetadata() returns the ffprobe result, if you're wondering what it is, have a look to an example with ffprobe 4.0. Warning , direct use of ffprobe metadata if not ensured by semver, bc break can potentially happen.","title":"Metadata"},{"location":"video-info-service/#metadata-retrieval","text":"<?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\Exception\\InfoReaderExceptionInterface ; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Info\\StreamTypeInterface ; $infoReader = new VideoInfoReader ( new FFProbeConfig ()); try { $info = $infoReader -> getInfo ( '/path/video.mp4' ); } catch ( InfoReaderExceptionInterface $e ) { // Possibly wrong media, see below for exceptions // details } // Metadata as returned by ffprobe $info -> getMetadata (); // By stream $info -> getStreamsMetadataByType ( StreamTypeInterface :: VIDEO ); $info -> getStreamsMetadataByType ( StreamTypeInterface :: AUDIO ); $info -> getStreamsMetadataByType ( StreamTypeInterface :: SUBTITLE ); $info -> getStreamsMetadataByType ( StreamTypeInterface :: DATA ); $nbStreams = $info -> countStreams (); $nbVideoStreams = $info -> countStreams ( StreamTypeInterface :: VIDEO ); $nbAudioStreams = $info -> countStreams ( StreamTypeInterface :: AUDIO ); $nbSubStreams = $info -> countStreams ( StreamTypeInterface :: SUBTITLE );","title":"Metadata retrieval"},{"location":"video-info-service/#metadata-example","text":"As returned by ffprobe <?php return [ 'streams' => [ 0 => [ 'index' => 0 , 'codec_name' => 'h264' , 'codec_long_name' => 'H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10' , 'profile' => 'Main' , 'codec_type' => 'video' , 'codec_time_base' => '81/2968' , 'codec_tag_string' => 'avc1' , 'codec_tag' => '0x31637661' , 'width' => 320 , 'height' => 180 , 'coded_width' => 320 , 'coded_height' => 180 , 'has_b_frames' => 2 , 'sample_aspect_ratio' => '1:1' , 'display_aspect_ratio' => '16:9' , 'pix_fmt' => 'yuv420p' , 'level' => 40 , 'color_range' => 'tv' , 'color_space' => 'smpte170m' , 'color_transfer' => 'bt709' , 'color_primaries' => 'smpte170m' , 'chroma_location' => 'left' , 'refs' => 1 , 'is_avc' => 'true' , 'nal_length_size' => '4' , 'r_frame_rate' => '120/1' , 'avg_frame_rate' => '1484/81' , 'time_base' => '1/90000' , 'start_pts' => 0 , 'start_time' => '0.000000' , 'duration_ts' => 5467500 , 'duration' => '60.750000' , 'bit_rate' => '39933' , 'bits_per_raw_sample' => '8' , 'nb_frames' => '1113' , 'disposition' => [ 'default' => 1 , 'dub' => 0 , 'original' => 0 , 'comment' => 0 , 'lyrics' => 0 , 'karaoke' => 0 , 'forced' => 0 , 'hearing_impaired' => 0 , 'visual_impaired' => 0 , 'clean_effects' => 0 , 'attached_pic' => 0 , 'timed_thumbnails' => 0 , ], 'tags' => [ 'creation_time' => '2018-07-04T14:51:24.000000Z' , 'language' => 'und' , 'handler_name' => 'VideoHandler' , ], ], 1 => [ 'index' => 1 , 'codec_name' => 'aac' , 'codec_long_name' => 'AAC (Advanced Audio Coding)' , 'profile' => 'LC' , 'codec_type' => 'audio' , 'codec_time_base' => '1/22050' , 'codec_tag_string' => 'mp4a' , 'codec_tag' => '0x6134706d' , 'sample_fmt' => 'fltp' , 'sample_rate' => '22050' , 'channels' => 1 , 'channel_layout' => 'mono' , 'bits_per_sample' => 0 , 'r_frame_rate' => '0/0' , 'avg_frame_rate' => '0/0' , 'time_base' => '1/22050' , 'start_pts' => 0 , 'start_time' => '0.000000' , 'duration_ts' => 1355766 , 'duration' => '61.485986' , 'bit_rate' => '84255' , 'max_bit_rate' => '84255' , 'nb_frames' => '1325' , 'disposition' => [ 'default' => 1 , 'dub' => 0 , 'original' => 0 , 'comment' => 0 , 'lyrics' => 0 , 'karaoke' => 0 , 'forced' => 0 , 'hearing_impaired' => 0 , 'visual_impaired' => 0 , 'clean_effects' => 0 , 'attached_pic' => 0 , 'timed_thumbnails' => 0 , ], 'tags' => [ 'creation_time' => '2018-07-04T14:51:24.000000Z' , 'language' => 'eng' , 'handler_name' => 'Mono' , ], ], ], 'format' => [ 'filename' => '/tmp/big_buck_bunny_low.m4v' , 'nb_streams' => 2 , 'nb_programs' => 0 , 'format_name' => 'mov,mp4,m4a,3gp,3g2,mj2' , 'format_long_name' => 'QuickTime / MOV' , 'start_time' => '0.000000' , 'duration' => '61.533000' , 'size' => '983115' , 'bit_rate' => '127816' , 'probe_score' => 100 , 'tags' => [ 'major_brand' => 'mp42' , 'minor_version' => '512' , 'compatible_brands' => 'isomiso2avc1mp41' , 'creation_time' => '2018-07-04T14:51:24.000000Z' , 'title' => 'big_buck_bunny' , 'encoder' => 'HandBrake 1.1.0 2018042400' , ], ] ];","title":"Metadata example"},{"location":"video-thumb-service/","text":"The VideoThumbGenerator service acts as a wrapper over ffmpeg and deal with video thumbnail creation. It exposes an immutable api for thumbnail generation parameters and attempt to make debugging easier with clean exceptions. You can also inject any psr-3 compatible logger if you don't want to log issues by yourself. <?php use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\Exception\\ConverterExceptionInterface ; use Soluble\\MediaTools\\Video\\ { VideoThumbGenerator , VideoThumbParams }; $generator = new VideoThumbGenerator ( new FFMpegConfig ( '/path/to/ffmpeg' )); $params = ( new VideoThumbParams ()) -> withTime ( 1.25 ); try { $generator -> makeThumbnail ( '/path/inputFile.mov' , '/path/outputFile.jpg' , $params ); } catch ( ConverterExceptionInterface $e ) { // See chapter about exception !!! } Requirements \u00b6 You'll need to have ffmpeg installed on your system. Initialization \u00b6 The VideoThumbGenerator requires an FFMpegConfig object as first parameter. This is where you set the location of the ffmpeg binary, the number of threads you allow for conversions and the various timeouts if needed. The second parameter can be used to inject any psr-3 compatible logger . <?php use Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig , FFMpegConfigInterface }; use Soluble\\MediaTools\\Video\\VideoThumbGenerator ; $converter = new VideoThumbGenerator ( // @param FFMpegConfigInterface new FFMpegConfig ( // (?string) - path to ffmpeg binary (default: ffmpeg/ffmpeg.exe) $binary = null , // (?int) - ffmpeg default threads (null: single-thread) $threads = null , // (?float) - max time in seconds for ffmpeg process (null: disable) $timeout = null , // (?float) - max idle time in seconds for ffmpeg process $idleTimeout = null , // (array) - additional environment variables $env = [] ), // @param ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`. $logger = null ); Tip: initialize in a container (psr-11) It's a good idea to register services in a container. Depending on available framework integrations, you may have a look to the VideoThumbGeneratorFactory and/or FFMpegConfigFactory to get an example based on a psr-11 compatible container. See also the provided default configuration file. Usage \u00b6 Thumbnailing \u00b6 Typically you'll use the VideoThumbGenerator::makeThumbnail() method in which you specify the input/output files as well as the thumbnail params. <?php use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\ { VideoThumbGenerator , VideoThumbParams , SeekTime }; $generator = new VideoThumbGenerator ( new FFMpegConfig ( '/path/to/ffmpeg' )); $params = ( new VideoThumbParams ()) -> withTime ( 1.25 ); // or: ->withSeekTime(new SeekTime(1.25)); $generator -> makeThumbnail ( '/path/inputFile.mov' , '/path/outputFile.jpg' , $params ); Warning , if the time is out of range, an NoOutputGeneratedException will be thrown. The makeThumbnail() method will automatically honour the process timeouts, logger... as specified during service initialization. What if I need more control over the process ? (advanced usage) You can use the Video\\VideoThumbGenerator::getSymfonyProcess(string $inputFile, string $outputFile, VideoConvertParamsInterface $convertParams, ?ProcessParamsInterface $processParams = null): Process to get more control on the conversion process. <?php $process = $thumbService -> getSymfonyProcess ( '/path/inputFile.mov' , '/path/outputFile.jpg' , ( new VideoThumbParams ()) -> withTime ( 1.25 ) ); $process -> start (); foreach ( $process as $type => $data ) { if ( $process :: OUT === $type ) { echo \" \\n Read from stdout: \" . $data ; } else { // $process::ERR === $type echo \" \\n Read from stderr: \" . $data ; } } Have a look to the symfony/process documentation for more recipes. Parameters \u00b6 The Video\\VideoThumbParams exposes an immutable api that attempt to mimic ffmpeg params. <?php use Soluble\\MediaTools\\Video\\VideoThumbParams ; $params = ( new VideoThumbParams ()) -> withQualityScale ( 2 ) -> withTime ( 12.23 ); // alternatively //->withSeekTime(SeekTime::createFromHMS('0:00:12.23')); Immutable api, what does it change for me ? (vs fluent) VideoThumbParams exposes an immutable style api ( ->withXXX() , like PSR-7 for example) . It means that the original object is never touched, the withXXX() methods will return a newly created object. Please be aware of it especially if you're used to fluent interfaces as both expose chainable methods... your primary reflexes might cause pain: <?php $params = ( new VideoThumbParams ()); $newParams = $params -> withSeekTime ( new SeekTime ( 1.1212 )); // $params does not contain SeekTime (incorrect usage) $generator -> convert ( 'i.mov' , 'output.jpg' , $params ); // $newParams contains SeekTime (correct) $generator -> convert ( 'i.mov' , 'output.jpg' , $newParams ); Here's a list of categorized built-in methods you can use. See the ffmpeg doc for more information. Time related: Method FFmpeg arg(s) Example(s) Note(s) withTime(float) -ss \u25cc 61.123 Set the time in seconds, decimals are considered milliseconds withFrame(int) -vf \"select=eq()\" 10 Choose a specific frame, useful for getting the last image for example withSeekTime(SeekTime) -ss \u25cc SeekTime::createFromHms('0:00:01.9') Quality options: Method FFmpeg arg(s) Example(s) Note(s) withQualityScale(int) -qscale:v \u25cc 5 General process options: Method FFmpeg arg(s) Example(s) Note(s) withOutputFormat(string) -format \u25cc jpeg,png\u2026 file extension (if not provided) withOverwrite() -y by default. overwrite if file exists withNoOverwrite() throw exception if output exists Other methods: Method Note(s) withBuiltInParam(string, mixed) With any supported built-in param, see constants . withoutParam(string) Without the specified parameter. getParam(string $param): mixed Return the param calue or throw UnsetParamExeption if not set. hasParam(string $param): bool Whether the param has been set. toArray(): array Return the object as array. Filters \u00b6 Video filters can be set to the VideoThumbParams through the ->withVideoFilter(VideoFilterInterface $videoFilter) method: <?php use Soluble\\MediaTools\\Video\\Filter ; $params = ( new VideoConvertParams ()) -> withVideoFilter ( new Filter\\VideoFilterChain ([ // A scaling filter new Filter\\ScaleFilter ( 800 , 600 ), // Deint filter new Filter\\YadifVideoFilter (), // Denoise (slow but best denoiser, ok for thumbs) new Filter\\NlmeansVideoFilter () ]) ); See the complete video filters doc here Exceptions \u00b6 You can safely catch exceptions with the generic Soluble\\MediaTools\\VideoException\\ConverterExceptionInterface , alternatively you can also : <?php use Soluble\\MediaTools\\Video\\ { VideoThumbGenerator , VideoThumbParams }; use Soluble\\MediaTools\\Video\\Exception as VE ; /** @var VideoThumbGenerator $generator */ $params = ( new VideoThumbParams ()); try { $generator -> makeThumbnail ( 'i.mov' , 'out.jpg' , $params ); } catch ( VE\\MissingInputFileException $e ) { // 'i.mov does not exists echo $e -> getMessage (); // All exception below implements Ve\\ConverterExceptionInterface // It's possible to get them all in once } catch ( VE\\MissingTimeException $e ) { // Missing required time echo $e -> getMessage (); } catch ( VE\\NoOutputGeneratedException $e ) { // Probably the time seek was out of range // and no thumbnail was generated echo $e -> getMessage (); } catch ( // The following 3 exceptions are linked to process // failure 'ffmpeg exit code != 0) and implements // // - `VE\\ConversionProcessExceptionInterface` // (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface) // // in case you want to catch them all-in-once VE\\ProcessFailedException | VE\\ProcessSignaledException | VE\\ProcessTimedOutException $e ) { echo $e -> getMessage (); // Because they implement ProcessExceptionInterface // we can get a reference to the executed (symfony) process: $process = $e -> getProcess (); echo $process -> getExitCode (); echo $process -> getErrorOutput (); } catch ( VE\\ConverterExceptionInterface $e ) { // Other exceptions can be // // - VE\\RuntimeException // - VE\\InvalidParamException (should not happen) } Recipes \u00b6 Make a thumbnail of the last frame \u00b6 To get the last frame, use the VideoInfoReader to get the total number of frames. <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\ { VideoThumbGenerator , VideoThumbParams }; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception\\ConverterExceptionInterface ; $myVideo = '/path/video.mp4' ; // Can be taken from a service $infoReader = new VideoInfoReader ( new FFProbeConfig ( '/path/to/ffprobe' )); $generator = new VideoThumbGenerator ( new FFMpegConfig ( '/path/to/ffmpeg' )); $videoInfo = $infoReader -> getInfo ( $myVideo ); $params = ( new VideoThumbParams ()) -> withFrame ( $videoInfo -> getNbFrames () ); try { $generator -> makeThumbnail ( $myVideo , '/path/outputFile.jpg' , $params ); } catch ( ConverterExceptionInterface $e ) { // See chapter about exception !!! }","title":"\u2714 VideoThumbGenerator"},{"location":"video-thumb-service/#requirements","text":"You'll need to have ffmpeg installed on your system.","title":"Requirements"},{"location":"video-thumb-service/#initialization","text":"The VideoThumbGenerator requires an FFMpegConfig object as first parameter. This is where you set the location of the ffmpeg binary, the number of threads you allow for conversions and the various timeouts if needed. The second parameter can be used to inject any psr-3 compatible logger . <?php use Soluble\\MediaTools\\Video\\Config\\ { FFMpegConfig , FFMpegConfigInterface }; use Soluble\\MediaTools\\Video\\VideoThumbGenerator ; $converter = new VideoThumbGenerator ( // @param FFMpegConfigInterface new FFMpegConfig ( // (?string) - path to ffmpeg binary (default: ffmpeg/ffmpeg.exe) $binary = null , // (?int) - ffmpeg default threads (null: single-thread) $threads = null , // (?float) - max time in seconds for ffmpeg process (null: disable) $timeout = null , // (?float) - max idle time in seconds for ffmpeg process $idleTimeout = null , // (array) - additional environment variables $env = [] ), // @param ?\\Psr\\Log\\LoggerInterface - Default to `\\Psr\\Log\\NullLogger`. $logger = null ); Tip: initialize in a container (psr-11) It's a good idea to register services in a container. Depending on available framework integrations, you may have a look to the VideoThumbGeneratorFactory and/or FFMpegConfigFactory to get an example based on a psr-11 compatible container. See also the provided default configuration file.","title":"Initialization"},{"location":"video-thumb-service/#usage","text":"","title":"Usage"},{"location":"video-thumb-service/#thumbnailing","text":"Typically you'll use the VideoThumbGenerator::makeThumbnail() method in which you specify the input/output files as well as the thumbnail params. <?php use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\ { VideoThumbGenerator , VideoThumbParams , SeekTime }; $generator = new VideoThumbGenerator ( new FFMpegConfig ( '/path/to/ffmpeg' )); $params = ( new VideoThumbParams ()) -> withTime ( 1.25 ); // or: ->withSeekTime(new SeekTime(1.25)); $generator -> makeThumbnail ( '/path/inputFile.mov' , '/path/outputFile.jpg' , $params ); Warning , if the time is out of range, an NoOutputGeneratedException will be thrown. The makeThumbnail() method will automatically honour the process timeouts, logger... as specified during service initialization. What if I need more control over the process ? (advanced usage) You can use the Video\\VideoThumbGenerator::getSymfonyProcess(string $inputFile, string $outputFile, VideoConvertParamsInterface $convertParams, ?ProcessParamsInterface $processParams = null): Process to get more control on the conversion process. <?php $process = $thumbService -> getSymfonyProcess ( '/path/inputFile.mov' , '/path/outputFile.jpg' , ( new VideoThumbParams ()) -> withTime ( 1.25 ) ); $process -> start (); foreach ( $process as $type => $data ) { if ( $process :: OUT === $type ) { echo \" \\n Read from stdout: \" . $data ; } else { // $process::ERR === $type echo \" \\n Read from stderr: \" . $data ; } } Have a look to the symfony/process documentation for more recipes.","title":"Thumbnailing"},{"location":"video-thumb-service/#parameters","text":"The Video\\VideoThumbParams exposes an immutable api that attempt to mimic ffmpeg params. <?php use Soluble\\MediaTools\\Video\\VideoThumbParams ; $params = ( new VideoThumbParams ()) -> withQualityScale ( 2 ) -> withTime ( 12.23 ); // alternatively //->withSeekTime(SeekTime::createFromHMS('0:00:12.23')); Immutable api, what does it change for me ? (vs fluent) VideoThumbParams exposes an immutable style api ( ->withXXX() , like PSR-7 for example) . It means that the original object is never touched, the withXXX() methods will return a newly created object. Please be aware of it especially if you're used to fluent interfaces as both expose chainable methods... your primary reflexes might cause pain: <?php $params = ( new VideoThumbParams ()); $newParams = $params -> withSeekTime ( new SeekTime ( 1.1212 )); // $params does not contain SeekTime (incorrect usage) $generator -> convert ( 'i.mov' , 'output.jpg' , $params ); // $newParams contains SeekTime (correct) $generator -> convert ( 'i.mov' , 'output.jpg' , $newParams ); Here's a list of categorized built-in methods you can use. See the ffmpeg doc for more information. Time related: Method FFmpeg arg(s) Example(s) Note(s) withTime(float) -ss \u25cc 61.123 Set the time in seconds, decimals are considered milliseconds withFrame(int) -vf \"select=eq()\" 10 Choose a specific frame, useful for getting the last image for example withSeekTime(SeekTime) -ss \u25cc SeekTime::createFromHms('0:00:01.9') Quality options: Method FFmpeg arg(s) Example(s) Note(s) withQualityScale(int) -qscale:v \u25cc 5 General process options: Method FFmpeg arg(s) Example(s) Note(s) withOutputFormat(string) -format \u25cc jpeg,png\u2026 file extension (if not provided) withOverwrite() -y by default. overwrite if file exists withNoOverwrite() throw exception if output exists Other methods: Method Note(s) withBuiltInParam(string, mixed) With any supported built-in param, see constants . withoutParam(string) Without the specified parameter. getParam(string $param): mixed Return the param calue or throw UnsetParamExeption if not set. hasParam(string $param): bool Whether the param has been set. toArray(): array Return the object as array.","title":"Parameters"},{"location":"video-thumb-service/#filters","text":"Video filters can be set to the VideoThumbParams through the ->withVideoFilter(VideoFilterInterface $videoFilter) method: <?php use Soluble\\MediaTools\\Video\\Filter ; $params = ( new VideoConvertParams ()) -> withVideoFilter ( new Filter\\VideoFilterChain ([ // A scaling filter new Filter\\ScaleFilter ( 800 , 600 ), // Deint filter new Filter\\YadifVideoFilter (), // Denoise (slow but best denoiser, ok for thumbs) new Filter\\NlmeansVideoFilter () ]) ); See the complete video filters doc here","title":"Filters"},{"location":"video-thumb-service/#exceptions","text":"You can safely catch exceptions with the generic Soluble\\MediaTools\\VideoException\\ConverterExceptionInterface , alternatively you can also : <?php use Soluble\\MediaTools\\Video\\ { VideoThumbGenerator , VideoThumbParams }; use Soluble\\MediaTools\\Video\\Exception as VE ; /** @var VideoThumbGenerator $generator */ $params = ( new VideoThumbParams ()); try { $generator -> makeThumbnail ( 'i.mov' , 'out.jpg' , $params ); } catch ( VE\\MissingInputFileException $e ) { // 'i.mov does not exists echo $e -> getMessage (); // All exception below implements Ve\\ConverterExceptionInterface // It's possible to get them all in once } catch ( VE\\MissingTimeException $e ) { // Missing required time echo $e -> getMessage (); } catch ( VE\\NoOutputGeneratedException $e ) { // Probably the time seek was out of range // and no thumbnail was generated echo $e -> getMessage (); } catch ( // The following 3 exceptions are linked to process // failure 'ffmpeg exit code != 0) and implements // // - `VE\\ConversionProcessExceptionInterface` // (* which extends Mediatools\\Common\\Exception\\ProcessExceptionInterface) // // in case you want to catch them all-in-once VE\\ProcessFailedException | VE\\ProcessSignaledException | VE\\ProcessTimedOutException $e ) { echo $e -> getMessage (); // Because they implement ProcessExceptionInterface // we can get a reference to the executed (symfony) process: $process = $e -> getProcess (); echo $process -> getExitCode (); echo $process -> getErrorOutput (); } catch ( VE\\ConverterExceptionInterface $e ) { // Other exceptions can be // // - VE\\RuntimeException // - VE\\InvalidParamException (should not happen) }","title":"Exceptions"},{"location":"video-thumb-service/#recipes","text":"","title":"Recipes"},{"location":"video-thumb-service/#make-a-thumbnail-of-the-last-frame","text":"To get the last frame, use the VideoInfoReader to get the total number of frames. <?php use Soluble\\MediaTools\\Video\\Config\\FFProbeConfig ; use Soluble\\MediaTools\\Video\\Config\\FFMpegConfig ; use Soluble\\MediaTools\\Video\\ { VideoThumbGenerator , VideoThumbParams }; use Soluble\\MediaTools\\Video\\VideoInfoReader ; use Soluble\\MediaTools\\Video\\Exception\\ConverterExceptionInterface ; $myVideo = '/path/video.mp4' ; // Can be taken from a service $infoReader = new VideoInfoReader ( new FFProbeConfig ( '/path/to/ffprobe' )); $generator = new VideoThumbGenerator ( new FFMpegConfig ( '/path/to/ffmpeg' )); $videoInfo = $infoReader -> getInfo ( $myVideo ); $params = ( new VideoThumbParams ()) -> withFrame ( $videoInfo -> getNbFrames () ); try { $generator -> makeThumbnail ( $myVideo , '/path/outputFile.jpg' , $params ); } catch ( ConverterExceptionInterface $e ) { // See chapter about exception !!! }","title":"Make a thumbnail of the last frame"},{"location":"about/license/","text":"License \u00b6 The MIT License (MIT) Copyright \u00a9 2018-2020 Vanvelthem S\u00e9bastien Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"The MIT License (MIT) Copyright \u00a9 2018-2020 Vanvelthem S\u00e9bastien Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"}]}